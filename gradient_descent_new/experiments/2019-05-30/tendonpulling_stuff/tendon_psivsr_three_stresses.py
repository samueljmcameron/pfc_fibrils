# got the three stresses from the stress strain graph generated by tendon_averagetwist.py

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1.inset_locator import inset_axes
import sys
import seaborn as sns
sys.path.append('../../../../scripts/')
from fig_settings import configure_fig_settings
sys.path.append('../../scripts/')
from psidata import PsiData
from readparams import ReadParams

if __name__=="__main__":

    configure_fig_settings()

    width  = 3.37*1.2
    height = width*1.8

    colors = sns.color_palette()

    loadsuf = ["K_{33}","k_{24}","\\Lambda","\\omega","\\gamma_s"]
    savesuf = ["K_{33}","k_{24}","\\Lambda","\\omega","\\gamma_s"]

    gamma = 0.04

    k24 = 0.5
    Lambda = 600
    omega = 20

    q = 4 # um ^{-1}
    K22 = 6 # pN

    types = ["linear","frustrated"]

    strains_for = {}

    names_for = {}

    stresses = np.array([0.0,3.3708,18.539,98.876],float)
    strains_for["linear"] = np.array([0.0,0.00017323,0.00069291,0.0019843],float)
    strains_for["frustrated"] = np.array([0.0,0.0020157,0.0034803,0.004315],float)

    names_for["linear"] = "lintendon_psivsr_stress"
    names_for["frustrated"] = "frusttendon_psivsr_stress"
    markertypes = ["--","-."]

    fig = plt.figure()
    fig.set_size_inches(width,height)

    ax = []

    for i,stress in enumerate(stresses):

        if (i > 0):
            ax.append(fig.add_subplot(4,1,i+1,sharex=ax[0]))
        else:
            ax.append(fig.add_subplot(4,1,i+1))


    for i,type in enumerate(types):

        scan = {}
        scan['\\gamma_s']=gamma
        scan['k_{24}']=k24
        scan['\\omega']=omega
        scan['\\Lambda']=Lambda


        for j,u in enumerate(strains_for[type]):

            if j == 0:

                strain = None

            else:

                strain = str(u)


            psi = PsiData(scan=scan,loadsuf=loadsuf,savesuf=savesuf,strain=strain,
                          name=names_for[type])

            ax[j].plot(psi.r()/q*1000,psi.psi(),'-',color=colors[i],
                       label=rf"$\tilde{{\sigma}}=\num{{{stresses[j]:.2e}}}$")
            
    for i,stress in enumerate(stresses):

        ax[i].legend(frameon=False)
        ax[i].set_ylabel(r'$\psi(\tilde{r})$' + ' (' + r'$\si{\radian}$' + ')')
        if (i == 3):
            ax[i].set_xlabel(r'$\tilde{r}$' + ' (' + r'$\si{\nano\meter}$' + ')')
        else:
            plt.setp(ax[i].get_xticklabels(),visible=False)


    psi.strain = None


    fig.subplots_adjust(left=0.2,right=0.8,bottom=0.1,top=0.95,hspace=0.05)
    fig.savefig(psi.psivsr_sname(name="psivsr_specific_stresses"))

    plt.show()








